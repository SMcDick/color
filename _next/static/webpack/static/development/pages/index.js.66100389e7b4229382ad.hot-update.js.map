{"version":3,"file":"static/webpack/static/development/pages/index.js.66100389e7b4229382ad.hot-update.js","sources":["webpack:///./components/ColorPicker.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport Color from \"color\"\nimport theme from \"../theme\"\n\nconst getHex = val => {\n  try {\n    return Color(val).hex()\n  } catch (e) {\n    return null\n  }\n}\n\nconst getRGB = val => {\n  try {\n    return Color(val)\n      .rgb()\n      .object()\n  } catch (e) {\n    return {}\n  }\n}\n\nconst getHSL = val => {\n  try {\n    return Color(val)\n      .hsl()\n      .object()\n  } catch (e) {\n    return {}\n  }\n}\n\nconst getColorValues = val => {\n  const hex = getHex(val)\n  const rgb = getRGB(val)\n  const hsl = getHSL(val)\n  return {\n    hex,\n    rgb,\n    hsl\n  }\n}\n\nconst RangeSlider = ({\n  name,\n  min,\n  max,\n  onChange,\n  value,\n  thumbColor,\n  trackColor\n}) => {\n  return (\n    <Input\n      name={name}\n      type=\"range\"\n      min={min}\n      max={max}\n      step=\"1\"\n      value={value}\n      onChange={onChange}\n      width={1}\n      css={{\n        appearance: \"none\",\n        borderRadius: \"999px\",\n        height: \"6px\",\n        outline: \"none\",\n        backgroundColor: trackColor,\n        \"&::-webkit-slider-thumb\": {\n          backgroundColor: thumbColor,\n          appearance: \"none\",\n          width: \"16px\",\n          height: \"16px\",\n          borderRadius: \"50%\",\n          cursor: \"pointer\"\n        }\n      }}\n    />\n  )\n}\n\nconst ColorPicker = ({ currentColor, onChange, onRemoveColor }) => {\n  const [colorValues, setColorValues] = useState(() =>\n    getColorValues(currentColor)\n  )\n\n  useEffect(\n    () => {\n      const next = Color(currentColor)\n      const newState = {\n        hex: next.hex(),\n        rgb: next.rgb().object(),\n        hsl: next.hsl().object()\n      }\n      setColorValues(newState)\n    },\n    [currentColor]\n  )\n\n  const handleHexChange = e => {\n    const val = e.target.value\n    setColorValues(prevValue => ({ ...prevValue, hex: val }))\n    try {\n      const next = Color(val).hex()\n      onChange(next)\n    } catch (e) {\n      return\n    }\n  }\n\n  const handleRGBChange = e => {\n    const val = e.target.value\n    const name = e.target.name\n\n    const rgbValue = { ...colorValues.rgb, [name]: val }\n    setColorValues(prevValue => ({\n      ...prevValue,\n      rgb: rgbValue\n    }))\n\n    try {\n      const next = Color(rgbValue).hex()\n      onChange(next)\n    } catch (e) {\n      return\n    }\n  }\n\n  const handleHSLChange = e => {\n    const val = e.target.value\n    const name = e.target.name\n\n    const hslValue = { ...colorValues.hsl, [name]: val }\n    setColorValues(prevValue => ({\n      ...prevValue,\n      hsl: hslValue\n    }))\n\n    try {\n      const next = Color(hslValue).hex()\n      onChange(next)\n    } catch (e) {\n      return\n    }\n  }\n\n  const getContrastRatio = (currentColor, otherColor) => {\n    return Color(currentColor)\n      .contrast(Color(otherColor))\n      .toFixed(2)\n  }\n\n  const contrastForBlack = currentColor => {\n    return getContrastRatio(currentColor, \"black\")\n  }\n\n  const contrastForWhite = currentColor => {\n    return getContrastRatio(currentColor, \"white\")\n  }\n\n  const showContrastLevel = ratio => {\n    if (ratio < 3) {\n      return \"Fail\"\n    } else if (ratio > 3 && ratio < 4.5) {\n      return \"AA large\"\n    } else if (ratio >= 4.5 && ratio < 7) {\n      return \"AA\"\n    } else if (ratio >= 7) {\n      return \"AAA\"\n    }\n    return \"\"\n  }\n\n  const getColor = currentColor =>\n    Color(currentColor).isLight()\n      ? \"rgba(0,0,0,0.75)\"\n      : \"rgba(255,255,255,0.85)\"\n\n  return (\n    <Article\n      px={4}\n      py={4}\n      color={getColor(currentColor)}\n      bg={currentColor}\n      mt={3}\n    >\n      <Div\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems='flex-start'\n        maxWidth='48rem'\n        mx='auto'\n      >\n      <Flex width={1} mb={4}>\n        <TextInput\n          color=\"inherit\"\n          bg=\"transparent\"\n          border={0}\n          fontSize={4}\n          fontWeight={800}\n          value={colorValues.hex}\n          onChange={handleHexChange}\n          px={0}\n          css={{ transition: \"none\" }}\n        />\n        <P\n          ml=\"auto\"\n          mr={3}\n          display=\"inline-block\"\n          fontSize={1}\n          px={2}\n          py={1}\n          borderRadius={9999}\n          my={0}\n          bg=\"black\"\n          color={currentColor}\n          css={{ transition: \"none\", whiteSpace: \"nowrap\" }}\n        >\n          <Span fontWeight={800}>{contrastForBlack(currentColor)} </Span>\n\n          <Span>{showContrastLevel(contrastForBlack(currentColor))}</Span>\n        </P>\n        <P\n          display=\"inline-block\"\n          fontSize={1}\n          px={2}\n          py={1}\n          borderRadius={9999}\n          m={0}\n          bg=\"white\"\n          color={currentColor}\n          css={{ transition: \"none\", whiteSpace: \"nowrap\" }}\n        >\n          <Span fontWeight={800}>{contrastForWhite(currentColor)} </Span>\n          <Span>{showContrastLevel(contrastForWhite(currentColor))}</Span>\n        </P>\n      </Flex>\n      <Flex width={[1,1/2]} flexWrap='wrap' px={3}>\n        <Label\n          fontSize={[1,2]}\n          display=\"block\"\n          width={1}\n          color=\"inherit\"\n          fontWeight={700}\n          css={{ transition: \"none\" }}\n        >\n          Red\n        </Label>\n      <Flex width={1} mb={1}>\n        <Div width={1}>\n          <RangeSlider\n            name=\"r\"\n            min=\"0\"\n            max=\"255\"\n            value={colorValues.rgb.r}\n            onChange={handleRGBChange}\n            trackColor={Color(currentColor).isLight() ? \"#000\" : \"#fff\"}\n            thumbColor={Color(currentColor).isLight() ? \"#fff\" : \"#000\"}\n          />\n        </Div>\n        <Div width={64} justifyContent=\"right\">\n          <TextInput\n            px={0}\n            py={0}\n            type=\"number\"\n            border={0}\n            color=\"inherit\"\n            bg=\"transparent\"\n            textAlign=\"right\"\n            width={1}\n            min=\"0\"\n            max=\"255\"\n            fontSize={[2,3]}\n            name=\"r\"\n            value={Math.floor(colorValues.rgb.r)}\n            onChange={handleRGBChange}\n            css={{ transition: \"none\" }}\n          />\n        </Div>\n      </Flex>\n      <Label\n        width={1}\n        fontSize={[1,2]}\n        fontWeight={700}\n        color=\"inherit\"\n        css={{ transition: \"none\" }}\n      >\n        Green\n      </Label>\n      <Flex width={1}  mb={1}>\n        <Div width={1}>\n          <RangeSlider\n            name=\"g\"\n            min=\"0\"\n            max=\"255\"\n            value={colorValues.rgb.g}\n            onChange={handleRGBChange}\n            trackColor={Color(currentColor).isLight() ? \"#000\" : \"#fff\"}\n            thumbColor={Color(currentColor).isLight() ? \"#fff\" : \"#000\"}\n          />\n        </Div>\n        <Div width={1 / 4} justifyContent=\"right\">\n          <TextInput\n            px={0}\n            py={0}\n            name=\"g\"\n            type=\"number\"\n            color=\"inherit\"\n            fontSize={[2,3]}\n            bg=\"transparent\"\n            border={0}\n            width={1}\n            textAlign=\"right\"\n            min=\"0\"\n            max=\"255\"\n            value={Math.floor(colorValues.rgb.g)}\n            onChange={handleRGBChange}\n            css={{ transition: \"none\" }}\n          />\n        </Div>\n      </Flex>\n      <Flex width={1} flexWrap=\"wrap\">\n        <Label\n          fontSize={[1,2]}\n          width={1}\n          color=\"inherit\"\n          fontWeight={700}\n          css={{ transition: \"none\" }}\n        >\n          Blue\n        </Label>\n        <Div width={3 / 4}>\n          <RangeSlider\n            name=\"b\"\n            min=\"0\"\n            max=\"255\"\n            value={colorValues.rgb.b}\n            onChange={handleRGBChange}\n            trackColor={Color(currentColor).isLight() ? \"#000\" : \"#fff\"}\n            thumbColor={Color(currentColor).isLight() ? \"#fff\" : \"#000\"}\n          />\n        </Div>\n        <Div width={1 / 4} justifyContent=\"right\">\n          <TextInput\n            px={0}\n            py={0}\n            name=\"b\"\n            type=\"number\"\n            border={0}\n            fontSize={[2,3]}\n            bg=\"transparent\"\n            textAlign=\"right\"\n            width={1}\n            color=\"inherit\"\n            min=\"0\"\n            max=\"255\"\n            value={Math.floor(colorValues.rgb.b)}\n            onChange={handleRGBChange}\n            css={{ transition: \"none\" }}\n          />\n        </Div>\n      </Flex>\n    </Flex>\n    <Flex width={[1,1/2]} flexWrap=\"wrap\" mt={[3,0]}>\n        <Flex width={1} flexWrap=\"wrap\" mb={1}>\n          <Label\n            width={1}\n            fontSize={[1,2]}\n            width={1}\n            fontWeight={700}\n            color=\"inherit\"\n            css={{ transition: \"none\" }}\n          >\n            Hue\n          </Label>\n          <Div width={3 / 4}>\n            <RangeSlider\n              name=\"h\"\n              min=\"0\"\n              max=\"360\"\n              value={colorValues.hsl.h}\n              onChange={handleHSLChange}\n              trackColor={Color(currentColor).isLight() ? \"#000\" : \"#fff\"}\n              thumbColor={Color(currentColor).isLight() ? \"#fff\" : \"#000\"}\n            />\n          </Div>\n          <Div width={1 / 4} justifyContent=\"right\">\n            <TextInput\n              px={0}\n              py={0}\n              name=\"h\"\n              type=\"number\"\n              bg=\"transparent\"\n              color=\"inherit\"\n              border={0}\n              fontSize={[2,3]}\n              width={1}\n              textAlign=\"right\"\n              min=\"0\"\n              max=\"360\"\n              onChange={handleHSLChange}\n              value={Math.floor(colorValues.hsl.h)}\n              css={{ transition: \"none\" }}\n            />\n          </Div>\n        </Flex>\n        <Flex width={1} flexWrap=\"wrap\" mb={1}>\n          <Label\n            width={1}\n            fontSize={[1,2]}\n            fontWeight={700}\n            color=\"inherit\"\n            css={{ transition: \"none\" }}\n          >\n            Saturation\n          </Label>\n          <Div width={3 / 4}>\n            <RangeSlider\n              name=\"s\"\n              min=\"0\"\n              max=\"360\"\n              value={colorValues.hsl.s}\n              onChange={handleHSLChange}\n              trackColor={Color(currentColor).isLight() ? \"#000\" : \"#fff\"}\n              thumbColor={Color(currentColor).isLight() ? \"#fff\" : \"#000\"}\n            />\n          </Div>\n          <Div width={1 / 4}>\n            <TextInput\n              px={0}\n              py={0}\n              name=\"s\"\n              type=\"number\"\n              width={1}\n              textAlign=\"right\"\n              bg=\"transparent\"\n              color=\"inherit\"\n              border={0}\n              fontSize={[2,3]}\n              min=\"0\"\n              max=\"100\"\n              onChange={handleHSLChange}\n              value={Math.floor(colorValues.hsl.s)}\n              css={{ transition: \"none\" }}\n            />\n          </Div>\n        </Flex>\n        <Flex width={1} flexWrap=\"wrap\">\n          <Label\n            width={1}\n            fontSize={[1,2]}\n            fontWeight={700}\n            color=\"inherit\"\n            css={{ transition: \"none\" }}\n          >\n            Lightness\n          </Label>\n          <Div width={3 / 4}>\n            <RangeSlider\n              name=\"l\"\n              min=\"0\"\n              max=\"100\"\n              value={colorValues.hsl.l}\n              onChange={handleHSLChange}\n              trackColor={Color(currentColor).isLight() ? \"#000\" : \"#fff\"}\n              thumbColor={Color(currentColor).isLight() ? \"#fff\" : \"#000\"}\n            />\n          </Div>\n          <Div width={1 / 4} justifyContent=\"right\">\n            <TextInput\n              px={0}\n              py={0}\n              name=\"l\"\n              type=\"number\"\n              width={1}\n              bg=\"transparent\"\n              color=\"inherit\"\n              border={0}\n              textAlign=\"right\"\n              fontSize={[2,3]}\n              min=\"0\"\n              max=\"100\"\n              value={Math.floor(colorValues.hsl.l)}\n              onChange={handleHSLChange}\n              css={{ transition: \"none\" }}\n            />\n          </Div>\n        </Flex>\n      </Flex>\n      <Div textAlign=\"center\" mt={3} width={1}>\n        <TextButton\n          bg=\"transparent\"\n          color=\"inherit\"\n          onClick={() => onRemoveColor(currentColor)}\n        >\n          Remove\n        </TextButton>\n      </Div>\n    </Div>\n    </Article>\n  )\n}\n\nexport default React.memo(ColorPicker)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AANA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAFA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAFA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AASA;AA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","sourceRoot":""}