{"version":3,"file":"static/webpack/static/development/pages/index.js.9def0d80411a84d20336.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { get as getIdb, set as setIdb } from \"idb-keyval\"\nimport palx from \"palx\"\nimport OutsideClickHandler from \"react-outside-click-handler\"\nimport useHistory from \"../utils/useHistory\"\nimport useInterval from \"../utils/useInterval\"\nimport isEmpty from \"lodash/isEmpty\"\nimport isArray from \"lodash/isArray\"\nimport uniqWith from \"lodash/uniqWith\"\nimport isEqual from \"lodash/isEqual\"\nimport toNumber from \"lodash/toNumber\"\nimport reduce from \"lodash/reduce\"\nimport findKey from \"lodash/findKey\"\nimport debounce from \"lodash/debounce\"\nimport theme from \"../theme\"\n\nimport defaultPalette from \"../utils/defaultPalette\"\nimport generateRandomPalette from \"../utils/generateRandomPalette\"\nimport sortPalette from \"../utils/sortPalette\"\nimport getAllCombos from \"../utils/getAllCombos\"\nimport getContrastScore from \"../utils/getContrastScore\"\n\nimport Preview from \"../components/Preview\"\nimport PlayerControls from \"../components/PlayerControls\"\n\nconst resetPinned = {\n  color: false,\n  bg: false,\n  borderColor: false,\n  parentBg: false\n}\n\nconst debouncedUpdateCombos = debounce(\n  (updatedPalette, contrastRatio, setAvailableCombos) => {\n    const availableCombos = getAllCombos(updatedPalette, contrastRatio)\n    setAvailableCombos(availableCombos)\n  },\n  500\n)\n\nconst Index = () => {\n  const [palette, setPalette] = useState(sortPalette(defaultPalette))\n  const [availableCombos, setAvailableCombos] = useState(() =>\n    getAllCombos(defaultPalette, 4.5)\n  )\n  const [paletteModalIsOpen, togglePaletteModal] = useState(false)\n  const [likes, updateLikes] = useState([])\n  const [contrastRatio, setContrastRatio] = useState(4.5)\n  const [colorFilter, setColorFilter] = useState(\"none\")\n  const [paletteImage, setPaletteImage] = useState(null)\n  const [imageName, setImageName] = useState(\"\")\n  const [currentState, { set, undo, redo, canRedo, canUndo }] = useHistory({})\n  const { present: currentCombination } = currentState\n  const [pinnedColors, setPinnedColors] = useState(resetPinned)\n  const [borderWidth, setBorderWidth] = useState(0)\n  const [boxPadding, setBoxPadding] = useState(64)\n  const [palxColor, setPalxColor] = useState(\"#07c\")\n  const [currentPickerColor, setPickerColor] = useState({\n    color: null,\n    index: null\n  })\n  const [currentComboProp, setCurrentComboProp] = useState(null)\n  const [activeTab, setActiveTab] = useState(\"url\")\n  const { start, stop, isRunning } = useInterval({\n    duration: 3000,\n    startImmediate: true,\n    callback: () => {\n      const newCombo = generateRandomPalette(\n        palette,\n        pinnedColors,\n        currentCombination,\n        availableCombos\n      )\n      set(newCombo)\n    }\n  })\n\n  useEffect(() => {\n    getIdb(\"likes\").then(likes => {\n      likes && updateLikes(likes)\n    })\n\n    const starterCombination = generateRandomPalette(\n      palette,\n      pinnedColors,\n      currentCombination,\n      availableCombos\n    )\n\n    set(starterCombination)\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handleKeyPress)\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyPress)\n    }\n  })\n\n  const handleAutoCycling = () => {\n    isRunning ? stop() : start()\n  }\n\n  const handleLike = async () => {\n    const currentLikes = await likes\n\n    const deDuped = uniqWith([...currentLikes, currentCombination], isEqual)\n    updateLikes(deDuped)\n    await setIdb(\"likes\", deDuped)\n  }\n\n  const handleRemoveLike = async index => {\n    const newLikes = likes.filter((_, i) => index !== i)\n    updateLikes(newLikes)\n    await setIdb(\"likes\", newLikes)\n  }\n\n  const handleClearLikes = async () => {\n    updateLikes([])\n    await setIdb(\"likes\", [])\n  }\n\n  const handleNext = () => {\n    if (canRedo) {\n      return redo()\n    }\n    isRunning && stop()\n    const newCombo = generateRandomPalette(\n      palette,\n      pinnedColors,\n      currentCombination,\n      availableCombos\n    )\n    set(newCombo)\n  }\n\n  const handlePrevious = () => {\n    if (canUndo) {\n      stop()\n      undo()\n    }\n  }\n\n  const handleViewLike = index => {\n    isRunning && stop()\n    set(likes[index])\n  }\n\n  const handleRemoveColor = color => {\n    const alteredPalette = palette.filter(c => c !== color)\n    setPalette(alteredPalette)\n    setPickerColor({\n      color: null,\n      index: null\n    })\n  }\n\n  const handleAddColor = () => {\n    const newPalette = [...palette, \"#000000\"]\n    setPalette(newPalette)\n    setPickerColor({ color: \"#000000\", index: newPalette.length - 1 })\n  }\n\n  const handleKeyPress = ({ key }) => {\n    switch (key) {\n      case \"ArrowUp\":\n        handleLike()\n        break\n      case \"ArrowRight\":\n        handleNext()\n        break\n      case \"ArrowLeft\":\n        handlePrevious()\n        break\n    }\n  }\n\n  const handleColorBlindFilter = e => setColorFilter(e.target.value)\n\n  const handleSiteFetch = async palette => {\n    setPalette(palette)\n    setPinnedColors(resetPinned)\n    const availableCombos = getAllCombos(palette, contrastRatio)\n    setAvailableCombos(availableCombos)\n    const newCombo = generateRandomPalette(\n      palette,\n      resetPinned,\n      null,\n      availableCombos\n    )\n    set(newCombo)\n  }\n\n  const handleClearPalette = () => {\n    const clearedPalette = [\"#000000\", \"#FFFFFF\", \"#2c7cb0\", \"#757575\"]\n    setPalette(clearedPalette)\n    const availableCombos = getAllCombos(clearedPalette, contrastRatio)\n    setAvailableCombos(availableCombos)\n    const newCombo = generateRandomPalette(\n      clearedPalette,\n      resetPinned,\n      null,\n      availableCombos\n    )\n    set(newCombo)\n    setImageName(new Date())\n    setPaletteImage(\"\")\n  }\n\n  const handlePinColor = key => () => {\n    setPinnedColors(prevState => ({ ...prevState, [key]: !prevState[key] }))\n  }\n\n  const handleComboColorUpdate = (newColor, tooltipKey) => {\n    const newCombo = { ...currentCombination, [tooltipKey]: newColor }\n    set(newCombo)\n  }\n\n  const handleImageUpload = async e => {\n    setPaletteImage({\n      url: URL.createObjectURL(e.target.files[0]),\n      name: null,\n      username: null\n    })\n\n    const res = await fetch(\"https://image-palette.now.sh\", {\n      method: \"POST\",\n      body: e.target.files[0]\n    })\n    const palette = await res.json()\n\n    setPalette(palette)\n    setPinnedColors(resetPinned)\n    const availableCombos = getAllCombos(palette, contrastRatio)\n    setAvailableCombos(availableCombos)\n    const newCombo = generateRandomPalette(\n      palette,\n      resetPinned,\n      null,\n      availableCombos\n    )\n    set(newCombo)\n  }\n\n  const handleBorderWidthChange = e => setBorderWidth(parseInt(e.target.value))\n  const handleBoxPaddingChange = e => setBoxPadding(parseInt(e.target.value))\n\n  const handleFetchFromUnsplash = async () => {\n    const res = await fetch(\"https://unsplash-palette.now.sh\")\n    const { colors, url, name, username } = await res.json()\n    setPalette(colors)\n    setPinnedColors(resetPinned)\n    const availableCombos = getAllCombos(colors, contrastRatio)\n    setAvailableCombos(availableCombos)\n    const newCombo = generateRandomPalette(\n      palette,\n      resetPinned,\n      null,\n      availableCombos\n    )\n    set(newCombo)\n    setPaletteImage({ url, name, username })\n  }\n\n  const handlePalxColor = e => {\n    setPalxColor(e.target.value)\n  }\n\n  const handleUsePalx = () => {\n    const newPaletteObj = palx(palxColor)\n\n    const newPalette = reduce(\n      newPaletteObj,\n      (acc, curr) => {\n        return isArray(curr) ? [...acc, ...curr] : acc\n      },\n      []\n    )\n    setPalette(newPalette)\n    setPinnedColors(resetPinned)\n    const availableCombos = getAllCombos(newPalette, contrastRatio)\n    setAvailableCombos(availableCombos)\n    const newCombo = generateRandomPalette(\n      newPalette,\n      resetPinned,\n      null,\n      availableCombos\n    )\n    set(newCombo)\n  }\n\n  const handlePaletteColorClick = (color, index) => {\n    const comboColorProp = findKey(currentCombination, c => c === color)\n    if (comboColorProp) {\n      stop()\n      setCurrentComboProp(comboColorProp)\n    }\n    setPickerColor({ color, index })\n  }\n\n  const handleSetEditColor = color => {\n    isRunning && stop()\n\n    setPickerColor({ color, index: currentPickerColor.index })\n\n    const updatedPalette = [...palette]\n    updatedPalette[currentPickerColor.index] = color\n    setPalette(updatedPalette)\n\n    if (currentComboProp) {\n      set({ ...currentCombination, [currentComboProp]: color })\n    }\n\n    debouncedUpdateCombos(updatedPalette, contrastRatio, setAvailableCombos)\n  }\n\n  const handleContrastRatioChange = e => {\n    const newContrastRatio = toNumber(e.target.value)\n    setContrastRatio(newContrastRatio)\n    const availableCombos = getAllCombos(palette, newContrastRatio)\n    setAvailableCombos(availableCombos)\n  }\n\n  const handleActiveTab = value => () => setActiveTab(value)\n\n  const handleColorClick = (color, key) => {\n    isRunning && stop()\n    setCurrentComboProp(key)\n    const paletteIndex = palette.findIndex(p => p === color)\n    setPickerColor({ color, index: paletteIndex })\n  }\n\n  const colorParentBgContrastValue = getContrastScore(\n    currentCombination.color,\n    currentCombination.parentBg\n  )\n\n  const controlColor = colorParentBgContrastValue < 4.5 ? currentCombination.bg : currentCombination.color\n\n  return (\n    <Div\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      width={1}\n      position=\"relative\"\n      bg={currentCombination.parentBg}\n      style={{\n        overflow: \"hidden\",\n        filter:\n          colorFilter === \"none\"\n            ? \"none\"\n            : `url(/static/filters.svg#${colorFilter})`\n      }}\n    >\n\n      <Div\n        width={[1]}\n        color={controlColor}\n      >\n        <Div\n          pt={3}\n          px={3}\n          mb={3}\n          textAlign='center'\n        >\n          <TextButton\n            onClick={handleActiveTab(\"url\")}\n            bg=\"transparent\"\n            mr={3}\n            fontWeight={700}\n            fontSize={2}\n            color={activeTab === \"url\" ? \"blue.4\" : 'inherit'}\n          >\n            URL\n          </TextButton>\n          <TextButton\n            onClick={handleActiveTab(\"image\")}\n            bg=\"transparent\"\n            mr={3}\n            fontWeight={700}\n            fontSize={2}\n            color={activeTab === \"image\" ? \"blue.4\" : 'inherit'}\n          >\n            Image\n          </TextButton>\n          <TextButton\n            onClick={handleActiveTab(\"generative\")}\n            bg=\"transparent\"\n            mr={3}\n            fontWeight={700}\n            fontSize={2}\n            color={activeTab === \"generative\" ? \"blue.4\" : 'inherit'}\n          >\n            Generative\n          </TextButton>\n        </Div>\n\n        {activeTab === \"url\" && (\n          <Div px={3} mx='auto' maxWidth='32rem'>\n            <SiteFetch onSubmit={handleSiteFetch} />\n          </Div>\n        )}\n\n        {activeTab === \"image\" && (\n          <>\n            <Flex mt={3} mb={2} px={3}>\n              <Div>\n                <Input\n                  id=\"imageUpload\"\n                  border=\"1px solid rgba(0,0,0,.1)\"\n                  py={3}\n                  width={1}\n                  pl={3}\n                  key={imageName}\n                  type=\"file\"\n                  accept=\".png, .jpg, .jpeg\"\n                  onChange={handleImageUpload}\n                  css={{ display: \"none\" }}\n                />\n                <Label\n                  display=\"block\"\n                  color=\"gray.0\"\n                  bg=\"gray.8\"\n                  fontSize={2}\n                  borderRadius={2}\n                  py={2}\n                  px={3}\n                  width=\"auto\"\n                  fontWeight={700}\n                  textAlign=\"center\"\n                  css={{ whiteSpace: 'nowrap', cursor: \"pointer\" }}\n                  htmlFor=\"imageUpload\"\n                >\n                  Upload image\n                </Label>\n              </Div>\n              <Div>\n                <P textAlign='center'>\n                or\n                </P>\n              </Div>\n              <Div ml='auto'>\n                <Button\n                  color=\"white\"\n                  bg=\"gray.3\"\n                  fontSize={2}\n                  borderRadius={2}\n                  py={2}\n                  px={3}\n                  ml=\"auto\"\n                  display=\"flex\"\n                  width={\"auto\"}\n                  border=\"none\"\n                  fontWeight={700}\n                  css={{\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    cursor: \"pointer\",\n                    whiteSpace: 'nowrap'\n                  }}\n                  onClick={handleFetchFromUnsplash}\n                >\n                  <Icon viewBox=\"0 0 123 123\" size={16} type=\"unsplash\" />\n                  <Span pl={2}>Unsplash photo</Span>\n                </Button>\n              </Div>\n            </Flex>\n\n            {paletteImage && (\n              <>\n                <Flex px={3}>\n                  <TextButton ml=\"auto\" onClick={handleClearPalette}>\n                    Clear Image\n                  </TextButton>\n                </Flex>\n\n                <Div p={2} border=\"1px solid rgba(0,0,0,.1)\">\n                  <Img src={paletteImage.url} />\n                  {paletteImage.name && (\n                    <P color=\"gray.5\" fontSize={0}>\n                      Photo by{\" \"}\n                      <TextLink\n                        href={`https://unsplash.com/@${paletteImage.username}`}\n                      >\n                        {paletteImage.name}\n                      </TextLink>{\" \"}\n                      on{\" \"}\n                      <TextLink href=\"https://unsplash.com/\">Unsplash</TextLink>\n                    </P>\n                  )}\n                </Div>\n              </>\n            )}\n          </>\n        )}\n\n        <Div>\n          <Div\n            fontWeight={700}\n            mt={3}\n            mb={2}\n            display=\"flex\"\n            flexWrap=\"wrap\"\n            alignItems=\"center\"\n          >\n            {activeTab === \"generative\" && (\n              <Form\n                width={1}\n                mb={4}\n                px={3}\n                borderRadius={2}\n                style={{ overflow: \"hidden\" }}\n              >\n                <Label mb={2} display=\"block\">\n                  Base Color\n                </Label>\n                <Flex\n                  overflow=\"hidden\"\n                  borderRadius={2}\n                  css={{ overflow: \"hidden\" }}\n                >\n                  <TextInput\n                    width={48}\n                    fontSize={2}\n                    py={3}\n                    readOnly\n                    border={0}\n                    bg={palxColor}\n                  />\n                  <TextInput\n                    type=\"text\"\n                    value={palxColor}\n                    onChange={handlePalxColor}\n                    fontSize={2}\n                    fontWeight={700}\n                    py={3}\n                    px={3}\n                    width={[3 / 4]}\n                    type=\"url\"\n                    border=\"0\"\n                    bg=\"gray.8\"\n                    borderRadius={0}\n                  />\n                  <Button\n                    py={3}\n                    width={1 / 4}\n                    bg=\"gray.3\"\n                    fontSize={2}\n                    color=\"white\"\n                    fontWeight={700}\n                    border=\"none\"\n                    style={{ cursor: \"pointer\", minWidth: 128 }}\n                    onClick={handleUsePalx}\n                  >\n                    Generate\n                  </Button>{\" \"}\n                </Flex>\n              </Form>\n            )}\n            <Div px={3}>\n              <Palette\n                palette={palette}\n                pickerColor={currentPickerColor}\n                activeColors={Object.values(currentCombination)}\n                onClick={handlePaletteColorClick}\n                onAddColor={handleAddColor}\n              />\n              <Flex mt={3}>\n                <TextButton\n                  bg=\"transparent\"\n                  fontSize={2}\n                  onClick={handleClearPalette}\n                >\n                  Clear palette\n                </TextButton>\n                <TextButton\n                  bg=\"transparent\"\n                  fontWeight={700}\n                  fontSize={2}\n                  ml=\"auto\"\n                  onClick={() => togglePaletteModal(true)}\n                >\n                  Export palette\n                </TextButton>\n              </Flex>\n              <Dl display='flex' maxWidth='24rem' width={1} mb={0}>\n                <Dt fontSize={2} width={3/4}>Accessible Combinations</Dt>\n                <Dd fontSize={2} width={1/4} fontWeight={800} ml={0} textAlign='right'>\n                  {availableCombos.length}\n                </Dd>\n              </Dl>\n                <Dl display='flex' maxWidth='24rem' width={1} mb={0} pb={3}>\n                  <Dt fontSize={2} width={3/4}>Combos with Parent Bg</Dt>\n                  <Dd fontSize={2} width={1/4} fontWeight={800} ml={0} textAlign='right'>\n                    {(availableCombos.length * palette.length).toLocaleString()}\n                  </Dd>\n                </Dl>\n\n              {paletteModalIsOpen && \n              <PaletteModal\n                togglePaletteModal={togglePaletteModal}\n                palette={palette}\n              />\n            }\n            </Div>\n          </Div>\n\n          {currentPickerColor.color && (\n            <OutsideClickHandler\n              onOutsideClick={() => {\n                setPickerColor({\n                  color: null,\n                  index: null\n                })\n                setCurrentComboProp(null)\n              }}\n            >\n              <ColorPicker\n                currentColor={currentPickerColor.color}\n                onChange={handleSetEditColor}\n                onRemoveColor={handleRemoveColor}\n              />\n            </OutsideClickHandler>\n          )}\n        </Div>\n\n\n      </Div>\n\n      {!isEmpty(currentCombination) && (\n        <Div width={[1]}>\n        <Div borderTop='1px solid' borderColor={controlColor} style={{opacity: .2}}></Div>\n          <PlayerControls\n            currentCombination={currentCombination}\n            pinnedColors={pinnedColors}\n            onPrevious={handlePrevious}\n            onNext={handleNext}\n            onPinColor={handlePinColor}\n            onLike={handleLike}\n            onAutoCycling={handleAutoCycling}\n            isRunning={isRunning}\n            onComboColorUpdate={handleComboColorUpdate}\n            onColorClick={handleColorClick}\n          />\n        <Div maxWidth='48rem' mx='auto' pb={4}>\n              <CombinationTools\n                currentCombination={currentCombination}\n                pinnedColors={pinnedColors}\n                onPrevious={handlePrevious}\n                onNext={handleNext}\n                onPinColor={handlePinColor}\n                onLike={handleLike}\n                onAutoCycling={handleAutoCycling}\n                isRunning={isRunning}\n                onComboColorUpdate={handleComboColorUpdate}\n                onColorClick={handleColorClick}\n              />\n          <Preview\n            borderWidth={borderWidth}\n            boxPadding={boxPadding}\n            currentCombination={currentCombination}\n          />\n        </Div>\n        <Div color={controlColor} pb={3}>\n          <Div mb={4} borderTop='1px solid' borderColor={controlColor} style={{opacity: .175 }}></Div>\n        <Div px={4}>\n          <H4 fontSize={2}>Settings</H4>\n        </Div>\n        <Form pt={4} px={4}>\n          <Fieldset border=\"0\" p={0}>\n            <Legend fontWeight={700} fontSize={3}>\n              Contrast Ratio \n            </Legend>\n            <Flex mx={-3} py={2}>\n              <Flex px={3}>\n                <Input\n                  type=\"radio\"\n                  name=\"contrastRatio\"\n                  value={3}\n                  onChange={handleContrastRatioChange}\n                  checked={contrastRatio === 3}\n                  mr={2}\n                />\n                <Label style={{ whiteSpace: \"nowrap\" }}>\n                  <Span fontWeight={800}>3 </Span>\n                  <Span fontSize={3}>AA large</Span>\n                </Label>\n              </Flex>\n              <Flex px={3}>\n                <Input\n                  type=\"radio\"\n                  name=\"contrastRatio\"\n                  value={4.5}\n                  onChange={handleContrastRatioChange}\n                  checked={contrastRatio === 4.5}\n                  mr={2}\n                />\n                <Label style={{ whiteSpace: \"nowrap\" }}>\n                  <Span fontWeight={800}>4.5 </Span>\n                  <Span fontSize={3}>AA</Span>\n                </Label>\n              </Flex>\n              <Flex px={3}>\n                <Input\n                  type=\"radio\"\n                  name=\"contrastRatio\"\n                  value={7}\n                  onChange={handleContrastRatioChange}\n                  checked={contrastRatio === 7}\n                  mr={2}\n                />\n                <Label style={{ whiteSpace: \"nowrap\" }}>\n                  <Span fontWeight={800}>7:1 </Span>\n                  <Span fontSize={2}>AAA</Span>\n                </Label>\n              </Flex>\n            </Flex>\n          </Fieldset>\n        </Form>\n        <Div px={4}>\n          <ColorBlindFilter\n            onChange={handleColorBlindFilter}\n            currentValue={colorFilter}\n          />\n          <Div>\n            <Label fontWeight={700} fontSize={2} mr={2}>\n              Border width\n            </Label>\n            <Input\n              value={borderWidth}\n              onChange={handleBorderWidthChange}\n              type=\"number\"\n              py={2}\n              px={2}\n              fontSize={2}\n              fontWeight={600}\n              borderRadius={2}\n              border={\"1px solid \" + theme.colors.gray[8]}\n              min={0}\n              max={32}\n              step={1}\n            />\n          </Div>\n          <Div>\n            <Label fontWeight={700} fontSize={2} mr={2}>\n              Box Padding\n            </Label>\n            <Input\n              value={boxPadding}\n              onChange={handleBoxPaddingChange}\n              type=\"number\"\n              py={2}\n              px={2}\n              fontSize={2}\n              fontWeight={600}\n              borderRadius={2}\n              border={\"1px solid \" + theme.colors.gray[8]}\n              min={0}\n              max={32}\n              step={1}\n            />\n          </Div>\n        </Div>\n        </Div>\n        <Div py={4} px={4} bg='white'>\n          <Likes\n            likes={likes}\n            onSelectLike={handleViewLike}\n            onRemoveLike={handleRemoveLike}\n            onClearLikes={handleClearLikes}\n          />\n        </Div>\n        <Div\n          bg='white'\n          display=\"flex\"\n          py={3}\n          px={3}\n          borderTop=\"1px solid rgba(0,0,0,.1)\"\n        >\n          <A\n            display=\"block\"\n            href=\"https://cloudflare.design\"\n            fontWeight={700}\n            fontSize={2}\n          >\n            Cloudflare Design\n          </A>\n          <A\n            href=\"https://github.com/cloudflare-design\"\n            ml=\"auto\"\n            fontSize={2}\n            color=\"blue.4\"\n            display=\"block\"\n            fontWeight={700}\n          >\n            GitHub\n          </A>\n        </Div>\n        </Div>\n      )}\n    </Div>\n  )\n}\n\nexport default Index\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AACA;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAkBA;AACA;AAFA;AAjBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAwBA;AACA;AACA;AACA;AAMA;AACA;AAXA;AAvBA;AAAA;AAAA;AACA;AAoCA;AACA;AACA;AACA;AAEA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AATA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAQA;AACA;AAFA;AACA;AARA;AAOA;AAPA;AAAA;AACA;AADA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAyBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;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","sourceRoot":""}