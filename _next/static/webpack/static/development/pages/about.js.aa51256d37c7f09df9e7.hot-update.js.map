{"version":3,"file":"static/webpack/static/development/pages/about.js.aa51256d37c7f09df9e7.hot-update.js","sources":["webpack:///./pages/about.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport Color from \"color\"\nimport chroma from \"chroma-js\"\nimport HexVis from \"../components/HexVis\"\nimport ColorNames from \"../components/ColorNames\"\nimport MiniColorSwatch from \"../components/MiniColorSwatch\"\n\nconst getColorName = async hex => {\n  const hexMinusHash = hex.replace(\"#\", \"\")\n  const res = await fetch(`https://api.color.pizza/v1/${hexMinusHash}`)\n  const json = await res.json()\n  return json.colors[0].name\n}\n\nconst About = () => {\n  const [theColor, setTheColor] = useState(\"#f16975\")\n  const [colorInput, setColorInput] = useState(\"#f16975\")\n  const [mouseX, setMouseX] = useState(null)\n  const [colorName, setColorName] = useState(\"\")\n\n  const updateColorName = async () => {\n    const colorName = await getColorName(theColor)\n    setColorName(colorName)\n  }\n\n  useEffect(\n    () => {\n      updateColorName()\n    },\n    [theColor]\n  )\n\n  const handleTheColor = e => {\n    const colorValue = e.target.value\n    setColorInput(colorValue)\n\n    try {\n      Color(colorValue)\n      setTheColor(Color(colorValue).hex())\n    } catch (e) {}\n  }\n\n  const handleMouseMove = e => {\n    setMouseX(e.pageX / e.target.clientWidth)\n  }\n\n  const theColorLight = Color(theColor)\n    .lighten(0.3)\n    .hex()\n\n  const theColorRGB = Color(theColor)\n    .rgb()\n    .string()\n\n  const theColorHSL = Color(theColor)\n    .hsl()\n    .round()\n    .string()\n\n  const theColorWACAGWhite = Color(theColor).contrast(Color(\"white\"))\n  const theColorWACAGBlack = Color(theColor).contrast(Color(\"black\"))\n\n  const theColorAccessibleWhite =\n    theColorWACAGWhite > 4.49 ? \"Accessible\" : \"Inaccessible\"\n\n  const theColorAccessibleBlack =\n    theColorWACAGBlack > 4.49 ? \"Accessible\" : \"Inaccessible\"\n\n  const theColorScaleTint = chroma\n    .scale([theColor, \"#ffffff\"])\n    .mode(\"hsl\")\n    .colors(8)\n\n  return (\n    <Div>\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Header width={1}>\n          <H2 mt={0} fontSize={[5, 6, 9]} fontWeight={700} mb={3}>\n            Thinking about color\n          </H2>\n          <P fontSize={[4, 5]}>\n            A documentation journey with the Product Design & Engineering teams\n            at Cloudflare\n          </P>\n        </Header>\n      </Section>\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2}>\n            The Question\n          </H3>\n          <P fontSize={5}>\n            What are all the possible things someone might want or need to know\n            about a color?\n          </P>\n          <Ul display=\"none\">\n            <Li>String Name</Li>\n            <Li>Hue Name</Li>\n            <Li>Saturation</Li>\n            <Li>Alpha level</Li>\n            <Li>\n              Values\n              <Ul>\n                <Li>LAB</Li>\n                <Li>RGB(A)</Li>\n                <Li>HSL(A)</Li>\n                <Li>HSV</Li>\n                <Li>uiColor</Li>\n              </Ul>\n            </Li>\n            <Li>What will this look like?</Li>\n            <Li>What will this look like as a button?</Li>\n            <Li>What will this look like as a border?</Li>\n            <Li>What will this look like as a background?</Li>\n            <Li>What will this look like as text?</Li>\n            <Li>\n              What colors will look good with this that are also accessible?\n            </Li>\n            <Li>How should I use this color</Li>\n            <Li>Is this color accessible with white?</Li>\n            <Li>Is this color accessible with black?</Li>\n            <Li>Where do we use this color?</Li>\n            <Li>What's the next darkest?</Li>\n            <Li>What's the next lightest?</Li>\n          </Ul>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2}>\n            The input\n          </H3>\n          <P fontSize={5}>This is a hex code</P>\n\n          <Input\n            fontSize={[6, 7, 8]}\n            onChange={handleTheColor}\n            value={colorInput}\n            css={`\n              background-color: transparent;\n              border: none;\n              appearance: none;\n              outline: none;\n            `}\n            type=\"text\"\n          />\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2}>\n            What is a hex code?\n          </H3>\n          <P fontSize={5}>\n            In mathematics and computing, hexadecimal (also base 16, or hex) is\n            a positional numeral system with a radix, or base, of 16. It uses\n            sixteen distinct symbols, most often the symbols 0–9 to represent\n            values zero to nine, and A, B, C, D, E, F (or alternatively a, b, c,\n            d, e, f) to represent values ten to fifteen.\n          </P>\n\n          <P fontSize={3}>\n            Hexadecimal numerals are widely used by computer system designers\n            and programmers. As each hexadecimal digit represents four binary\n            digits (bits), it allows a more human-friendly representation of\n            binary-coded values. One hexadecimal digit represents a nibble (4\n            bits), which is half of an octet or byte (8 bits). For example, a\n            single byte can have values ranging from 00000000 to 11111111 in\n            binary form, but this may be more conveniently represented as 00 to\n            FF in hexadecimal.\n          </P>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2}>\n            Wait what? What is a hex code? How does it relate to color?\n          </H3>\n          <P fontSize={5}>\n            A color is specified according to the intensity of its red, green\n            and blue components. The first two characters are the red channel,\n            the second two characters are green , and the last two characters\n            are blue.\n          </P>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2}>\n            Hex code math\n          </H3>\n          <P fontSize={5}>Translating a hex code into rgb</P>\n\n          <Div>\n            <HexVis hexCode={theColor} />\n          </Div>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2}>\n            What does this color look like as text?\n          </H3>\n          <P fontSize={5}>This is one way to visualize a color</P>\n\n          <H3 fontSize={[7, 8]} mb={2} mt={2} color={theColor}>\n            {theColor}\n          </H3>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n        bg={theColor}\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2}>\n            This is another way\n          </H3>\n\n          <H3 fontSize={[7, 8]} mb={2} mt={2}>\n            {theColor}\n          </H3>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2}>\n            We probably want a way to visualize background colors that doesn't\n            require the full screen. So we can visualize it as a swatch. Like\n            when you go to pick out paint at the store.\n          </H3>\n\n          <Div\n            width={160}\n            bg={theColor}\n            css={`\n              height: 60px;\n            `}\n          />\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2}>\n            We can visualize the value of the color as text and as a background.\n          </H3>\n\n          <Div\n            width={160}\n            bg={theColor}\n            css={`\n              height: 60px;\n            `}\n          />\n          <P mt={0} fontWeight={700} fontSize={4} color={theColor}>\n            {theColor}\n          </P>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n        onMouseMove={handleMouseMove}\n        bg={`hsl(0, 0%, ${mouseX * 100}%)`}\n      >\n        <Div>\n          <P color={`hsl(0, 0%, ${(1 - mouseX) * 100}%)`} mb={0}>\n            \"...A color is almost never seen as it really is...\" - Josef Albers\n          </P>\n          <H3\n            color={`hsl(0, 0%, ${(1 - mouseX) * 100}%)`}\n            fontSize={[6, 7, 8]}\n            mb={2}\n            mt={1}\n          >\n            We can visualize the value of the color as text and as a background.\n          </H3>\n\n          <Div\n            width={160}\n            bg={theColor}\n            css={`\n              height: 60px;\n            `}\n          />\n          <P mt={0} fontWeight={700} fontSize={4} color={theColor}>\n            {theColor}\n          </P>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2} mt={1}>\n            One problem with displaying the color value with the color itself,\n            is that sometimes the contrast is too low, impeding readability.\n          </H3>\n\n          <Div\n            width={160}\n            bg={theColorLight}\n            css={`\n              height: 60px;\n            `}\n          />\n          <P mt={0} fontWeight={700} fontSize={4} color={theColorLight}>\n            {theColorLight}\n          </P>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2} mt={1}>\n            As one potential solution, we can always display the color value and\n            the text example separately.\n          </H3>\n\n          <Flex>\n            <Div\n              width={160}\n              bg={theColor}\n              mr={2}\n              css={`\n                height: 60px;\n              `}\n            />\n            <P\n              css={`\n                line-height: 1;\n              `}\n              color={theColor}\n              m={0}\n              fontSize={9}\n              fontWeight={700}\n            >\n              Aa\n            </P>\n          </Flex>\n          <P mt={1} mb={6}>\n            <Code fontSize={4}>{theColor}</Code>\n          </P>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2} mt={1}>\n            Next, we might want to know what a color will look like if used as a\n            border.\n          </H3>\n\n          <Flex\n            border=\"1px solid\"\n            borderColor={theColor}\n            px={2}\n            py={3}\n            borderRadius=\"5px\"\n          >\n            <Div\n              width={160}\n              bg={theColor}\n              mr={2}\n              css={`\n                height: 60px;\n              `}\n            />\n            <P\n              css={`\n                line-height: 1;\n              `}\n              color={theColor}\n              m={0}\n              fontSize={9}\n              fontWeight={700}\n            >\n              Aa\n            </P>\n          </Flex>\n          <P mt={1} mb={6}>\n            <Code fontSize={4}>{theColor}</Code>\n          </P>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2} mt={1}>\n            Naturally, we need a name for this color so that we can discuss it\n            with fellow humans.\n          </H3>\n\n          <Flex alignItems=\"stretch\" mb={5}>\n            <P width={3 / 4} mr={3}>\n              If you've ever spent time with a group of people trying to name a\n              color you know that it's a task to be avoided if possible. With\n              this in mind, we find ourselves in luck because there are entire\n              services that will name a color for us.\n            </P>\n            <ColorNames color={theColor} />\n          </Flex>\n\n          <Flex\n            border=\"1px solid\"\n            borderColor={theColor}\n            px={2}\n            py={3}\n            borderRadius=\"5px\"\n          >\n            <Div\n              width={160}\n              bg={theColor}\n              mr={2}\n              css={`\n                height: 60px;\n              `}\n            />\n            <P\n              css={`\n                line-height: 1;\n              `}\n              color={theColor}\n              m={0}\n              fontSize={9}\n              fontWeight={700}\n            >\n              Aa\n            </P>\n          </Flex>\n          <P mt={2} mb={0} fontWeight={700} fontSize={4}>\n            {colorName}\n          </P>\n          <P mt={0} mb={6}>\n            <Code fontSize={4}>{theColor}</Code>\n          </P>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2} mt={1}>\n            Depending on the context, a hex code might not be what you want to\n            use.\n          </H3>\n\n          <P fontSize={5}>\n            If we leave it up to humans, they might use a color picker on an\n            image (or maybe a screenshot of an image!) which opens us up to\n            potential subtle shifts in value, leading to unintended visual\n            inconsistencies. Luckily we have javascript, so we can compute\n            equivalent values from a central source of truth. This allows anyone\n            to consume the proper color value, regardless of the medium and\n            context they are designing for.\n          </P>\n\n          <Flex\n            border=\"1px solid\"\n            borderColor={theColor}\n            px={2}\n            py={3}\n            borderRadius=\"5px\"\n          >\n            <Div\n              width={160}\n              bg={theColor}\n              mr={2}\n              css={`\n                height: 60px;\n              `}\n            />\n            <P\n              css={`\n                line-height: 1;\n              `}\n              color={theColor}\n              m={0}\n              fontSize={9}\n            >\n              Aa\n            </P>\n          </Flex>\n          <P mt={2} mb={0} fontWeight={700} fontSize={4}>\n            {colorName}\n          </P>\n          <P my={0}>\n            <Code fontSize={4}>{theColor}</Code>\n          </P>\n          <P my={0}>\n            <Code fontSize={4}>{theColorRGB}</Code>\n          </P>\n          <P my={0}>\n            <Code fontSize={4}>{theColorHSL}</Code>\n          </P>\n        </Div>\n      </Section>\n\n      <Section\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2} mt={1}>\n            Accessibility is important. We can quickly check if the color is\n            acessible with both black and white\n          </H3>\n\n          <Flex>\n          <ColorSwatch color={theColor} />\n          <Flex flexWrap=\"wrap\">\n            <Div width={1 / 4} px={2}>\n              <P fontSize={1} my={0} fontWeight={700}>\n                Achromatopsia\n              </P>\n              <Div\n                css={`\n                  filter: url(/static/filters.svg#achromatopsia);\n                `}\n              >\n                <MiniColorSwatch color={theColor} />\n              </Div>\n            </Div>\n            <Div width={1 / 4} pr={2}>\n              <P fontSize={1} my={0} fontWeight={700}>\n                Protanopia\n              </P>\n              <Div\n                css={`\n                  filter: url(/static/filters.svg#protanopia);\n                `}\n              >\n                <MiniColorSwatch color={theColor} />\n              </Div>\n            </Div>\n\n            <Div width={1 / 4} pr={2}>\n              <P fontSize={1}  my={0} fontWeight={700}>\n                Protanomaly\n              </P>\n              <Div\n                css={`\n                  filter: url(/static/filters.svg#protanomaly);\n                `}\n              >\n                <MiniColorSwatch color={theColor} />\n              </Div>\n            </Div>\n\n            <Div width={1 / 4}>\n              <P fontSize={1} my={0} fontWeight={700}>\n                Deuteranopia\n              </P>\n              <Div\n                css={`\n                  filter: url(/static/filters.svg#deuteranopia);\n                `}\n              >\n                <MiniColorSwatch color={theColor} />\n              </Div>\n            </Div>\n\n            <Div width={1 / 4} px={2}>\n              <P fontSize={1} my={0} fontWeight={700}>\n                Deuteranomaly\n              </P>\n              <Div\n                css={`\n                  filter: url(/static/filters.svg#deuteranomaly);\n                `}\n              >\n                <MiniColorSwatch color={theColor} />\n              </Div>\n            </Div>\n\n            <Div width={1 / 4} pr={2}>\n              <P fontSize={1} my={0} fontWeight={700}>\n                Tritanopia\n              </P>\n              <Div\n                css={`\n                  filter: url(/static/filters.svg#tritanopia);\n                `}\n              >\n                <MiniColorSwatch color={theColor} />\n              </Div>\n            </Div>\n\n            <Div width={1 / 4} pr={2}>\n              <P fontSize={1} my={0} fontWeight={700}>\n                Tritanomaly\n              </P>\n              <Div\n                css={`\n                  filter: url(/static/filters.svg#tritanomaly);\n                `}\n              >\n                <MiniColorSwatch color={theColor} />\n              </Div>\n            </Div>\n\n            <Div width={1 / 4}>\n              <P fontSize={1} my={0} fontWeight={700}>\n                Achromatomaly\n              </P>\n              <Div\n                css={`\n                  filter: url(/static/filters.svg#achromatomaly);\n                `}\n              >\n                <MiniColorSwatch color={theColor} />\n              </Div>\n            </Div>\n          </Flex>\n        </Flex>\n\n          <P mt={2} mb={0} fontWeight={700} fontSize={4}>\n            {colorName}\n          </P>\n          <P my={0}>\n            <Code fontSize={4}>{theColor}</Code>\n          </P>\n          <P my={0}>\n            <Code fontSize={4}>{theColorRGB}</Code>\n          </P>\n          <P mt={0} mb={3}>\n            <Code fontSize={4}>{theColorHSL}</Code>\n          </P>\n\n          <P my={0}>\n            <Code fontSize={4}>\n              Contrast ratio with white: {theColorWACAGWhite.toFixed(2)}\n            </Code>\n          </P>\n          <P mt={0} mb={3} fontSize={3}>\n            {theColorAccessibleWhite}\n          </P>\n\n          <P my={0}>\n            <Code fontSize={4}>\n              Contrast ratio with black: {theColorWACAGBlack.toFixed(2)}\n            </Code>\n          </P>\n          <P my={0} fontSize={3}>\n            {theColorAccessibleBlack}\n          </P>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2} mt={1}>\n            So far, we have are showing 10 data points from 1 piece of input.\n          </H3>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2} mt={1}>\n            Adding white to a color creates a tint\n          </H3>\n\n          <Div>\n            {theColorScaleTint.map(color => (\n              <Div px={3} py={3} bg={color}>\n                {color}\n              </Div>\n            ))}\n          </Div>\n          <Flex mt={3}>\n            {theColorScaleTint.map(color => (\n              <Div\n                mr={2}\n                width=\"30px\"\n                css={`\n                  height: 30px;\n                `}\n                borderRadius=\"50%\"\n                bg={color}\n              />\n            ))}\n          </Flex>\n\n          <Flex mt={3}>\n            {theColorScaleTint.map(color => (\n              <Div\n                mr={2}\n                width=\"30px\"\n                css={`\n                  height: 10px;\n                `}\n                borderRadius=\"20px\"\n                bg={color}\n              />\n            ))}\n          </Flex>\n        </Div>\n      </Section>\n\n      <Section\n        height=\"80vh\"\n        color=\"gray.0\"\n        px={5}\n        py={6}\n        display=\"flex\"\n        flexWrap=\"wrap\"\n        alignItems=\"center\"\n        borderBottom=\"1px solid\"\n        borderColor=\"gray.8\"\n      >\n        <Div>\n          <H3 fontSize={[6, 7, 8]} mb={2} mt={1}>\n            Resources\n          </H3>\n\n          <P fontSize={5}>\n            Excellent interactive sites and articles if you want to spend more\n            time exploring the vast world of Color Theory.\n          </P>\n\n          <P fontWeight={700} mb={2}>\n            Read\n          </P>\n          <P>\n            <TextLink href=\"https://www.amazon.com/Interaction-Color-Anniversary-Josef-Albers/dp/0300179359/ref=sr_1_1?ie=UTF8&qid=1512473341&sr=8-1&keywords=interaction+of+color\">\n              Interaction of Color (Book)\n            </TextLink>\n          </P>\n          <P>\n            <TextLink href=\"https://en.wikipedia.org/wiki/X11_color_names\">\n              History of x11 color names\n            </TextLink>\n          </P>\n          <P />\n          <TextLink href=\"http://hextodecimal.com/index.php?hex=f1\">\n            Hex to Decimal\n          </TextLink>\n          <P>\n            <TextLink href=\"http://printingcode.runemadsen.com/lecture-color/\">\n              Computational Color by Rune Madsen\n            </TextLink>\n          </P>\n          <P fontWeight={700}>Interact</P>\n          <P>\n            <TextLink href=\"http://color.method.ac/\">\n              Color by Method of Action\n            </TextLink>\n          </P>\n          <P />\n          <TextLink href=\"http://yupnet.org/interactionofcolor/\">\n            Interaction of Color (iPad App)\n          </TextLink>\n          <P fontWeight={700}>Watch</P>\n          <P>\n            <TextLink href=\"https://www.youtube.com/watch?v=HmStJQzclHc\">\n              Alex Sexton: Peachpuffs and Lemonchiffons\n            </TextLink>\n          </P>\n        </Div>\n      </Section>\n    </Div>\n  )\n}\nexport default About\n"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}