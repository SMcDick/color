{"version":3,"file":"static/webpack/static/development/pages/index.js.18fadf5618e54d7bc7fb.hot-update.js","sources":["webpack:///./components/ColorPicker.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport Color from \"color\"\n\nconst getHex = val => {\n  try {\n    return Color(val).hex()\n  } catch (e) {\n    return null\n  }\n}\n\nconst getRGB = val => {\n  try {\n    return Color(val)\n      .rgb()\n      .object()\n  } catch (e) {\n    return {}\n  }\n}\n\nconst getHSL = val => {\n  try {\n    return Color(val)\n      .hsl()\n      .object()\n  } catch (e) {\n    return {}\n  }\n}\n\nconst getColorValues = val => {\n  const hex = getHex(val)\n  const rgb = getRGB(val)\n  const hsl = getHSL(val)\n  return {\n    hex,\n    rgb,\n    hsl\n  }\n}\n\nconst ColorPicker = ({ currentColor, onChange, onRemoveColor }) => {\n  const [colorValues, setColorValues] = useState(() =>\n    getColorValues(currentColor)\n  )\n\n  useEffect(\n    () => {\n      const next = Color(currentColor)\n      const newState = {\n        hex: next.hex(),\n        rgb: next.rgb().object(),\n        hsl: next.hsl().object()\n      }\n      setColorValues(newState)\n    },\n    [currentColor]\n  )\n\n  const handleHexChange = e => {\n    const val = e.target.value\n    setColorValues(prevValue => ({ ...prevValue, hex: val }))\n    try {\n      const next = Color(val).hex()\n      onChange(next)\n    } catch (e) {\n      return\n    }\n  }\n\n  const handleRGBChange = e => {\n    const val = e.target.value\n    const name = e.target.name\n\n    const rgbValue = { ...colorValues.rgb, [name]: val }\n    setColorValues(prevValue => ({\n      ...prevValue,\n      rgb: rgbValue\n    }))\n\n    try {\n      const next = Color(rgbValue).hex()\n      onChange(next)\n    } catch (e) {\n      return\n    }\n  }\n\n  const handleHSLChange = e => {\n    const val = e.target.value\n    const name = e.target.name\n\n    const hslValue = { ...colorValues.hsl, [name]: val }\n    setColorValues(prevValue => ({\n      ...prevValue,\n      hsl: hslValue\n    }))\n\n    try {\n      const next = Color(hslValue).hex()\n      onChange(next)\n    } catch (e) {\n      return\n    }\n  }\n\n  const getContrastRatio = (currentColor, otherColor) => {\n    return Color(currentColor)\n      .contrast(Color(otherColor))\n      .toFixed(2)\n  }\n\n  const contrastForBlack = currentColor => {\n    return getContrastRatio(currentColor, \"black\")\n  }\n\n  const contrastForWhite = currentColor => {\n    return getContrastRatio(currentColor, \"white\")\n  }\n\n  const showContrastLevel = ratio => {\n    if (ratio < 3) {\n      return \"Fail\"\n    } else if (ratio > 3 && ratio < 4.5) {\n      return \"AA large\"\n    } else if (ratio >= 4.5 && ratio < 7) {\n      return \"AA\"\n    } else if (ratio >= 7) {\n      return \"AAA\"\n    }\n    return \"\"\n  }\n\n  return (\n    <Div\n      px={4}\n      pt={4}\n      pb={5}\n      color={\n        Color(currentColor).isLight()\n          ? \"rbga(0,0,0,.75)\"\n          : \"rgba(255,255,255,.85)\"\n      }\n      bg={currentColor}\n      mt={3}\n      display=\"flex\"\n      flexWrap=\"wrap\"\n    >\n      <Flex width={1}>\n      <TextInput\n        color=\"inherit\"\n        bg=\"transparent\"\n        border={0}\n        fontSize={5}\n        fontWeight={800}\n        value={colorValues.hex}\n        onChange={handleHexChange}\n        px={0}\n        css={{ transition: \"none\" }}\n      />\n          <P\n            fontSize={2}\n            px={3}\n            py={1}\n            borderRadius={9999}\n            fontWeight={400}\n            m={0}\n            bg='black'\n            color={currentColor}\n            css={{ transition: \"none\" }}\n          >\n            <Span>{contrastForBlack(currentColor)} </Span>\n\n            <Span>{showContrastLevel(contrastForBlack(currentColor))}</Span>\n          </P>\n          <P\n            fontSize={2}\n            fontWeight={700}\n            px={3}\n            py={1}\n            borderRadius={9999}\n            m={0}\n            bg='white'\n            color={currentColor}\n            css={{ transition: \"none\" }}\n          >\n            <Span>{contrastForWhite(currentColor)}</Span>\n            <Span>{showContrastLevel(contrastForWhite(currentColor))}</Span>\n          </P>\n        </Flex>\n      <Flex width={1 / 5} flexWrap=\"wrap\">\n        <Label color=\"inherit\" fontWeight={700} css={{ transition: \"none\" }}>\n          Red\n        </Label>\n        <TextInput\n          type=\"number\"\n          border={0}\n          color=\"inherit\"\n          bg=\"transparent\"\n          width=\"auto\"\n          min=\"0\"\n          max=\"255\"\n          fontSize={3}\n          name=\"r\"\n          value={Math.floor(colorValues.rgb.r)}\n          onChange={handleRGBChange}\n          css={{ transition: \"none\" }}\n        />\n        <Div width={1}>\n          <Input\n            name=\"r\"\n            type=\"range\"\n            min=\"0\"\n            max=\"255\"\n            step=\"1\"\n            width={64}\n            value={colorValues.rgb.r}\n            onChange={handleRGBChange}\n          />\n        </Div>\n      </Flex>\n      <Flex width={1 / 5} flexWrap=\"wrap\">\n        <Label fontWeight={700} color=\"inherit\" css={{ transition: \"none\" }}>\n          G\n        </Label>\n        <TextInput\n          name=\"g\"\n          type=\"number\"\n          color=\"inherit\"\n          fontSize={3}\n          bg=\"transparent\"\n          border={0}\n          width=\"auto\"\n          min=\"0\"\n          max=\"255\"\n          value={Math.floor(colorValues.rgb.g)}\n          onChange={handleRGBChange}\n          css={{ transition: \"none\" }}\n        />\n        <Div width={1}>\n          <Input\n            name=\"g\"\n            type=\"range\"\n            width={64}\n            min=\"0\"\n            max=\"255\"\n            step=\"1\"\n            value={colorValues.rgb.g}\n            onChange={handleRGBChange}\n          />\n        </Div>\n      </Flex>\n      <Flex width={1 / 5} flexWrap=\"wrap\">\n        <Label color=\"inherit\" fontWeight={700} css={{ transition: \"none\" }}>\n          B\n        </Label>\n        <TextInput\n          name=\"b\"\n          type=\"number\"\n          border={0}\n          fontSize={3}\n          bg=\"transparent\"\n          width=\"auto\"\n          color=\"inherit\"\n          min=\"0\"\n          max=\"255\"\n          value={Math.floor(colorValues.rgb.b)}\n          onChange={handleRGBChange}\n          css={{ transition: \"none\" }}\n        />\n        <Div width={1}>\n          <Input\n            name=\"b\"\n            type=\"range\"\n            min=\"0\"\n            max=\"255\"\n            step=\"1\"\n            width={64}\n            value={colorValues.rgb.b}\n            onChange={handleRGBChange}\n          />\n        </Div>\n      </Flex>\n      <Flex flexWrap=\"wrap\">\n        <Flex width={1 / 5} flexWrap=\"wrap\">\n          <Label fontWeight={700} color=\"inherit\" css={{ transition: \"none\" }}>\n            H\n          </Label>\n          <TextInput\n            name=\"h\"\n            type=\"number\"\n            width=\"auto\"\n            bg=\"transparent\"\n            color=\"inherit\"\n            border={0}\n            fontSize={3}\n            min=\"0\"\n            max=\"360\"\n            onChange={handleHSLChange}\n            value={Math.floor(colorValues.hsl.h)}\n            css={{ transition: \"none\" }}\n          />\n          <Div width={1}>\n            <Input\n              name=\"h\"\n              type=\"range\"\n              width={64}\n              min=\"0\"\n              max=\"360\"\n              step=\"1\"\n              value={colorValues.hsl.h}\n              onChange={handleHSLChange}\n            />\n          </Div>\n        </Flex>\n        <Flex width={1 / 5} flexWrap=\"wrap\">\n          <Label fontWeight={700} color=\"inherit\" css={{ transition: \"none\" }}>\n            S\n          </Label>\n          <TextInput\n            name=\"s\"\n            type=\"number\"\n            width=\"auto\"\n            bg=\"transparent\"\n            color=\"inherit\"\n            border={0}\n            fontSize={3}\n            min=\"0\"\n            max=\"100\"\n            onChange={handleHSLChange}\n            value={Math.floor(colorValues.hsl.s)}\n            css={{ transition: \"none\" }}\n          />\n          <Div width={1}>\n            <Input\n              name=\"s\"\n              type=\"range\"\n              width={64}\n              min=\"0\"\n              max=\"100\"\n              step=\"1\"\n              value={colorValues.hsl.s}\n              onChange={handleHSLChange}\n            />\n          </Div>\n        </Flex>\n        <Flex flexWrap=\"wrap\" width={1 / 5}>\n          <Label fontWeight={700} color=\"inherit\" css={{ transition: \"none\" }}>\n            L\n          </Label>\n          <TextInput\n            name=\"l\"\n            type=\"number\"\n            width=\"auto\"\n            bg=\"transparent\"\n            color=\"inherit\"\n            border={0}\n            fontSize={3}\n            min=\"0\"\n            max=\"100\"\n            value={Math.floor(colorValues.hsl.l)}\n            onChange={handleHSLChange}\n            css={{ transition: \"none\" }}\n          />\n          <Div width={1}>\n            <Input\n              name=\"l\"\n              type=\"range\"\n              width={64}\n              min=\"0\"\n              max=\"100\"\n              step=\"1\"\n              value={colorValues.hsl.l}\n              onChange={handleHSLChange}\n            />\n          </Div>\n        </Flex>\n      </Flex>\n      <Div textAlign='center' mt={3}>\n        <TextButton bg='transparent' color={currentColor} onClick={() => onRemoveColor(currentColor)}>\n          Remove\n        </TextButton>\n      </Div>\n    </Div>\n  )\n}\n\nexport default React.memo(ColorPicker)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAFA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAFA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AASA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AASA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AASA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAYA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAYA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAYA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAYA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAYA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAYA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;A","sourceRoot":""}